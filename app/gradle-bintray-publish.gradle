apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId GROUP_ID
            artifactId ARTIFACT_ID
            version VERSION
        }
    }
}

group = GROUP_ID
version = VERSION

bintray {
    user = BINTRAY_USER // bintray账号，需要在`gradle.properties` 文件添加环境变量配置
    key = BINTRAY_API_KEY // bintray API Key，需要在`gradle.properties` 文件添加环境变量配置
    configurations = ['archives']
    publications = ['MyPublication'] //就是上面 "publishing {publications {"  下的 “MyPublication”
    pkg {
        repo = 'maven' // bintray 仓库地址
        name = ARTIFACT_ID
        userOrg = USER_ORG
        licenses = ['Apache-2.0']
        vcsUrl = VCS_URL
        labels = ['Android'] // 插件标签
        publicDownloadNumbers = true
        publish = true
        version {
            name = VERSION
            desc = DESCRIPTION
            vcsTag = VERSION
            attributes = ['gradle-plugin': 'com.wangjiang:check-file-plugin'] //'com.wangjiang:check-file-plugin 就是classpath 配置的内容
        }
    }
}

//构建 sources.jar 和 javadoc.jar 并上传
if (project.getPlugins().hasPlugin('com.android.application') ||
        project.getPlugins().hasPlugin('com.android.library')) {
    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.source
    }
} else {
    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn:javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

artifacts {
    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {
        archives androidSourcesJar
        archives androidJavadocsJar
    } else {
        archives sourcesJar
        archives javadocJar
    }
}